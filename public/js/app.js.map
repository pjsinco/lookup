{"version":3,"sources":["app.js"],"names":[],"mappingsfile":"app.js","sourcesContent":["var FindADo = (function() {\n\n    function init() {\n\n        var $locInput = $('#location');\n        var $physInput = $('#physician');\n        var locationResolved = false;\n\n        var location = {\n            city: '',\n            state: '',\n            zip: '',\n            lat: '',\n            lon: ''\n        };\n\n        /**\n         * Ajax in our random location and populate the location input\n         *\n         */\n        function loadRandomLocation() {\n            $locInput.load('api/v1/locations/random', \n                function(responseText, textStatus, jqXHR) {\n                    var json = JSON.parse(responseText);\n                    location.city = json.data.city;\n                    location.state = json.data.state;\n                    location.zip = json.data.zip;\n                    location.lat = json.data.lat;\n                    location.lon = json.data.lon;\n\n                    $(this).val(json.data.city + ', ' + json.data.state + ' ' + json.data.zip );\n                $('.city').val(location.city);\n                $('.state').val(location.state);\n                $('.zip').val(location.zip);\n                $('.lat').val(location.lat);\n                $('.lon').val(location.lon);\n            });\n        };\n\n        var locations = new Bloodhound({\n            datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),\n            queryTokenizer: Bloodhound.tokenizers.whitespace,\n            limit: 10,\n            remote: {\n                url: 'api/v1/locations/search',\n                replace: function(url, query) {\n                    return url + '?q=' + query;\n                },\n                filter: function(locations) {\n                    var userTyped = ($locInput.typeahead('val'));\n                    return $.map(locations, function(d) {\n                            //console.log(d); // gives the array of objects\n\n                            // user typed a city\n                            if (isNaN(userTyped)) {\n                                // Keep the city, state list unique\n                                var unique = _.uniq(d, false, function(item) {\n                                    //multiple values with _.uniq\n                                    //http://stackoverflow.com/questions/26306415/underscore-lodash-unique-by-multiple-properties\n                                    return [item.city, item.state].join();\n                                });\n\n                                return $.map(unique, function(e) {\n                                    return {\n                                        city: e.city,\n                                        state: e.state,\n                                        lat: e.lat,\n                                        lon: e.lon,\n                                        value: e.city + ', ' + e.state\n                                    };\n                                });\n                            } else {\n                            // user typed a zip, so let's include zips\n                                return $.map(d, function(e) {\n                                    return {\n                                        city: e.city,\n                                        state: e.state,\n                                        zip: e.zip,\n                                        lat: e.lat,\n                                        lon: e.lon,\n                                        value: e.city + ', ' + e.state + ' ' + e.zip\n                                    };\n                                });\n                            }\n                        });\n                }\n            }\n        }); \n\n        locations.initialize();\n\n        $locInput.typeahead({\n            hint: true,\n            highlight: true,\n            minLength: 3,\n        }, {\n            name: 'locations',\n            display: 'value',\n            source: locations.ttAdapter(),\n            templates: {\n                suggestion: function(data) {\n                    var userTyped = $locInput.typeahead('val');\n                    if (isNaN(userTyped)) {\n                        return '<div>' + data.city + ', ' + data.state + '</div>';\n                    } else {\n                        return '<div>' + data.city + ', ' + data.state + ' ' +\n                            data.zip + '</div>';\n                    }\n                }\n            },\n            engine: Hogan\n        });\n\n        /**\n         * Debug Typeahead events\n         *\n         */\n        $locInput.bind('typeahead:selected', function(evt, suggestion, dataset) {\n            console.log('suggestion.value: ' + suggestion.value);\n            console.log('suggestion.city: ' + suggestion.city);\n            console.log('suggestion.state: ' + suggestion.state);\n            console.log('suggestion.lat: ' + suggestion.lat);\n            console.log('suggestion.lon: ' + suggestion.lon);\n            console.log(evt);\n            location.city = suggestion.city;\n            location.state = suggestion.state;\n            location.zip = suggestion.zip;\n            location.lat = suggestion.lat;\n            location.lon = suggestion.lon;\n\n            // TODO \n            // needs work\n            $locInput.on('blur', function(evt) {\n                updateFormInputsWithLocations();\n                console.log($('.city').val());\n                console.log($('.state').val());\n                console.log($('.zip').val());\n            });\n        });\n\n        $locInput.bind('typeahead:autocompleted', function(evt, suggestion) {\n            updateLocation(suggestion);\n            updateFormInputsWithLocations();\n            console.log('Autocompleted');\n            console.log('Suggestion.value: ' + suggestion.city);\n            locations.get(suggestion.city, function(d) {\n                console.log(d);\n            })\n        });\n\n        function updateLocation(suggestion) {\n            location.city = suggestion.city;\n            location.state = suggestion.state;\n            location.zip = suggestion.zip;\n            location.lat = suggestion.lat;\n            location.lon = suggestion.lon;\n        }\n\n        function updateFormInputsWithLocations() {\n                $('.city').val(location.city);\n                $('.state').val(location.state);\n                $('.zip').val(location.zip);\n                $('.lat').val(location.lat);\n                $('.lon').val(location.lon);\n        }\n        \n        /**\n         * Determines whether a string is a zip code.\n         *\n         */\n        function isZipCode(query) {\n            // TODO\n            // do we want to handle 9-digit zips?\n            //var pattern = new RegExp(/^\\d{5}$|^\\d{5}-\\d{4}$/)\n            var pattern = new RegExp(/^\\d{5}$/);\n            return pattern.test(query);\n        }\n\n        function loadZip(zip) {\n            $.get(\n                \n            );\n        }\n\n        /**\n         * Try to find a match for an un-autocompleted location input\n         *\n         */\n        function resolveLocation(query) {\n            console.info('resolving location');\n            if (isZipCode(query.trim())) {\n                console.log('is zip code');\n                loadZip(query.trim());\n            }\n\n            var x = []\n            locations.get(query, function(suggestions) {\n                // TODO\n                // overly simplistic for now \n                // -- doesn't care about the state, \n                //    just grabs the first matching city\n                suggestions.forEach(function(suggestion) {\n                    if (suggestion.city.toLowerCase() == query.toLowerCase()) {\n                        $locInput.typeahead('val', suggestion.value);\n                        updateLocation(suggestion);\n                        updateFormInputsWithLocations();\n                    }\n                });\n            });\n        }\n\n        function parseLocationField(input) {\n            \n        }\n\n        $locInput.on('blur', function(evt) {\n            console.log('blurred');\n            console.log('value: ' + evt.currentTarget.value);\n            resolveLocation(evt.currentTarget.value);\n            //updateFormInputsWithLocations();\n        });\n\n        /**\n         * Handle physician/specialty input\n         *\n         */\n        var physicians = new Bloodhound({\n            datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),\n            queryTokenizer: Bloodhound.tokenizers.whitespace,\n            //limit: 7,\n            remote: {\n                url: 'api/v1/physicians/search',\n                replace: function(url, uriEncodedQuery) {\n                    return url + '?name=' + uriEncodedQuery + '&city=' + location.city;\n                },\n                //wildcard: '%QUERY',\n                filter: function(physicians) {\n                    return $.map(physicians, function(d) {\n                        return $.map(d, function(e) {\n                            return {\n                                first_name: e.first_name,\n                                last_name: e.last_name,\n                                designation: e.designation,\n                                city: e.city,\n                                state: e.state,\n                                id: e.id,\n                                value: e.full_name\n                            };\n                        });\n                    });\n                }\n            }\n        });\n\n\n        var specialties = new Bloodhound({\n            datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),\n            queryTokenizer: Bloodhound.tokenizers.whitespace,\n            limit: 7,\n            prefetch: {\n                url: 'http://lookup.dev/data/specialties.json',\n                filter: function(specialties) {\n                    console.log(specialties);\n                    return $.map(specialties, function(d) {\n                        return $.map(d, function(e) {\n                            return {\n                                code: e.code,\n                                value: e.name\n                            };\n                        });\n                    });\n                }\n            }\n        });\n\n        physicians.initialize();\n        specialties.initialize();\n\n        $physInput.typeahead({\n            hint: false,\n            highlight: true,\n            minLength: 2,\n            limit: 7,\n        }, {\n            name: 'physicians',\n            //limit: 7,\n            display: 'value',\n            source: physicians.ttAdapter(),\n            templates: {\n                header: '<h5 class=\"typeahead-subhead\">Physicians near [city, state]</h5>',\n                suggestion: function(data) {\n                    // TODO\n                    // remove hard-coded url\n                    return '<div><a href=\"http://lookup.dev/physicians/' + data.id + '\">' + data.first_name + ' ' + data.last_name + ', ' +\n                        data.designation + '; ' + data.city + ', ' + data.state +\n                        '</a></div>';\n                }\n            }\n        }, {\n            name: 'specialties',\n            source: specialties.ttAdapter(),\n            display: 'value',\n            templates: {\n                header: '<h5 class=\"typeahead-subhead\">Specialties</h5>',\n                suggestion: function(data) {\n                    // TODO\n                    // remove hard-coded url\n                    return '<div><a href=\"#\">' + data.value + \"</a></div>\";\n                }\n            }\n        });\n\n        /**\n         * Kickoff\n         *\n         */\n        loadRandomLocation();\n\n    };\n\n    return {\n        init: init\n    };\n\n}());\n\n//    $('#location').tooltipster({\n//        content: $('hiya')\n//    });\n"],"sourceRoot":"/source/"}