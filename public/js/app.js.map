{"version":3,"sources":["app.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["$(document).ready(function() {\n\n    var city, state, zip, lat, lon;\n\n    /**\n     * Ajax in our random location and populate the location form field\n     *\n     */\n    function loadRandomLocation() {\n        $('#location').load('api/v1/locations/random', \n            function(responseText, textStatus, jqXHR) {\n                var json = JSON.parse(responseText);\n                city = json.data.city;\n                state = json.data.state;\n                zip = json.data.zip;\n                lat = json.data.lat;\n                lon = json.data.lon;\n\n                $(this).val(json.data.city + ', ' + json.data.state + ' ' + json.data.zip );\n            $('.city').val(city);\n            $('.state').val(state);\n            $('.zip').val(zip);\n            $('.lat').val(lat);\n            $('.lon').val(lon);\n        });\n    };\n\n\n    var locations = new Bloodhound({\n        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),\n        queryTokenizer: Bloodhound.tokenizers.whitespace,\n        limit: 10,\n        remote: {\n            url: 'api/v1/locations/%QUERY',\n            wildcard: '%QUERY',\n            filter: function(locations) {\n                return $.map(locations, function(d) {\n                    return {\n                        city: d.city,\n                        state: d.state,\n                        zip: d.zip,\n                        lat: d.lat,\n                        lon: d.lon,\n                        value: d.city + ', ' + d.state + ' ' + d.zip\n                    }\n                })\n            }\n        }\n    }); \n\n    locations.initialize();\n\n    $('#location').typeahead({\n        hint: false,\n        highlight: true,\n        minLength: 3,\n    }, {\n        name: 'locations',\n        limit: 7,\n        display: 'value',\n        source: locations.ttAdapter(),\n        templates: {\n            suggestion: function(data) {\n                return '<div>' + data.city + ', ' + data.state + ' ' +\n                    data.zip + '</div>';\n            },\n            empty: [\n                '<div class=\"empty-message\">',\n                'Sorry, unable to find any matches',\n                '</div>',\n            ].join('\\n')\n        }\n        \n    });\n\n    /**\n     * Debug Typeahead events\n     *\n     */\n    $('#location').bind('typeahead:select', function(evt, suggestion) {\n        console.log(suggestion);\n        city = suggestion.city;\n        state = suggestion.state;\n        zip = suggestion.zip;\n        lat = suggestion.lat;\n        lon = suggestion.lon;\n    });\n\n      $('#location').bind('typeahead:idle', function(evt) {\n          console.log('idle');\n          console.log(evt);\n      });\n\n    $('#location').bind('typeahead:asyncrequest', function(evt, query, dataset) {\n        console.log('asyncrequest');\n        /*console.log(evt);*/\n        /*console.log(query);*/\n        /*console.log(dataset);*/\n    });\n\n\n    $('#location').on('blur', function(evt) {\n        $('.city').val(city);\n        $('.state').val(state);\n        $('.zip').val(zip);\n        $('.lat').val(lat);\n        $('.lon').val(lon);\n    });\n\n\n    /**\n     * Handle physician/specialty input\n     *\n     */\n\n    var physicians = new Bloodhound({\n        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),\n        queryTokenizer: Bloodhound.tokenizers.whitespace,\n        limit: 10,\n        remote: {\n            url: 'api/v1/physicians/%QUERY',\n            replace: function(url, uriEncodedQuery) {\n                return url + '?foo=bar&q=' + uriEncodedQuery;\n            },\n            wildcard: '%QUERY',\n            filter: function(physicians) {\n                return $.map(physicians, function(d) {\n                    return $.map(d, function(e) {\n                        return {\n                            first_name: e.first_name,\n                            last_name: e.last_name,\n                            designation: e.designation,\n                            city: e.city,\n                            state: e.state,\n                            value: e.full_name\n                        };\n                    });\n                });\n            }\n        }\n    });\n\n    physicians.initialize();\n\n    $('#what').typeahead({\n        hint: false,\n        highlight: true,\n        minLength: 3,\n    }, {\n        name: 'physicians',\n        limit: 7,\n        display: 'value',\n        source: physicians.ttAdapter(),\n        templates: {\n            header: '<h3>Physicians</h3>',\n            suggestion: function(data) {\n                return '<div>' + data.first_name + ' ' + data.last_name + ', ' +\n                    data.designation + '; ' + data.city + ', ' + data.state +\n                    '</div>';\n            },\n            empty: [\n                '<div class=\"empty-message\">',\n                'Sorry, unable to find any matches',\n                '</div>',\n            ].join('\\n')\n        }\n\n    });\n\n    /**\n     * Kickoff\n     *\n     */\n    loadRandomLocation();\n    \n});\n"],"sourceRoot":"/source/"}